name: Release

on:
  push:
    tags:
      - "v*" # Trigger on version tags like v24.04.0

jobs:
  release:
    name: Build and Release
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64]

    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21.7"

      - name: Extract version without 'v'
        id: version
        run: echo "tag=${GITHUB_REF_NAME#v}" >> "$GITHUB_OUTPUT"

      - name: Build and package binary
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist

          EXT=""
          ARCHIVE_EXT=""
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            EXT=".exe"
            ARCHIVE_EXT="zip"
          else
            ARCHIVE_EXT="tar.gz"
          fi

          BIN_NAME="szczecin$EXT"
          PLATFORM_DIR="${{ matrix.goos }}/${{ matrix.goarch }}"
          BUILD_DIR="build/$PLATFORM_DIR"
          ARCHIVE_NAME="szczecin.${ARCHIVE_EXT}"
          ARCHIVE_PATH="dist/$PLATFORM_DIR/$ARCHIVE_NAME"

          mkdir -p "$BUILD_DIR" "dist/$PLATFORM_DIR"

          echo "Building $BIN_NAME..."

          env CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
            go build -ldflags="-s -w" -o "$BUILD_DIR/$BIN_NAME" .

          if [[ "${{ matrix.goos }}" != "windows" ]]; then
            chmod +x "$BUILD_DIR/$BIN_NAME"
            tar -czf "$ARCHIVE_PATH" -C build "$PLATFORM_DIR"
          else
            (cd build && zip -r "../$ARCHIVE_PATH" "$PLATFORM_DIR")
          fi

          echo "Packaged: $ARCHIVE_PATH"

      - name: Upload archives to GitHub release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/**/*.tar.gz
          name: ${{ steps.version.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
